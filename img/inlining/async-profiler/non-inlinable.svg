<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="949"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="949"> </text>
<g id="frames">
<g>
<title>all (111 samples, 100.00%)</title><rect x="10.0" y="915.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="926.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.90%)</title><rect x="10.0" y="899.0" width="10.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info(JavaThread*, int) (1 samples, 0.90%)</title><rect x="10.0" y="883.0" width="10.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info_helper(JavaThread*, int) (1 samples, 0.90%)</title><rect x="10.0" y="867.0" width="10.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>vframeArray::allocate(JavaThread*, int, GrowableArray&lt;compiledVFrame*&gt;*, RegisterMap*, frame, frame, frame, bool) (1 samples, 0.90%)</title><rect x="10.0" y="851.0" width="10.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.90%)</title><rect x="10.0" y="835.0" width="10.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.90%)</title><rect x="10.0" y="819.0" width="10.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.90%)</title><rect x="10.0" y="803.0" width="10.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.90%)</title><rect x="10.0" y="787.0" width="10.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.90%)</title><rect x="10.0" y="771.0" width="10.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge_delay (1 samples, 0.90%)</title><rect x="10.0" y="755.0" width="10.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge (1 samples, 0.90%)</title><rect x="10.0" y="739.0" width="10.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>try_charge (1 samples, 0.90%)</title><rect x="10.0" y="723.0" width="10.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>[unknown_Java] (6 samples, 5.41%)</title><rect x="20.6" y="899.0" width="63.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="23.6" y="910.0">[unknow..</text>
</g>
<g>
<title>sha512_implCompressMB (6 samples, 5.41%)</title><rect x="20.6" y="883.0" width="63.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="23.6" y="894.0">sha512_..</text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.90%)</title><rect x="84.4" y="899.0" width="10.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="87.4" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.90%)</title><rect x="84.4" y="883.0" width="10.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="87.4" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.90%)</title><rect x="84.4" y="867.0" width="10.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="87.4" y="878.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.90%)</title><rect x="84.4" y="851.0" width="10.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="87.4" y="862.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.90%)</title><rect x="84.4" y="835.0" width="10.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="87.4" y="846.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.90%)</title><rect x="84.4" y="819.0" width="10.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="87.4" y="830.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.90%)</title><rect x="84.4" y="803.0" width="10.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="87.4" y="814.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.90%)</title><rect x="84.4" y="787.0" width="10.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="87.4" y="798.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.90%)</title><rect x="84.4" y="771.0" width="10.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="87.4" y="782.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.90%)</title><rect x="84.4" y="755.0" width="10.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="87.4" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.90%)</title><rect x="95.0" y="899.0" width="10.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="98.0" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory.makeConcatWithConstants (1 samples, 0.90%)</title><rect x="95.0" y="883.0" width="10.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="98.0" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory.doStringConcat (1 samples, 0.90%)</title><rect x="95.0" y="867.0" width="10.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="98.0" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory.generate (1 samples, 0.90%)</title><rect x="95.0" y="851.0" width="10.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="98.0" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.generate (1 samples, 0.90%)</title><rect x="95.0" y="835.0" width="10.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="98.0" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles.foldArgumentsWithCombiner (1 samples, 0.90%)</title><rect x="95.0" y="819.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.0" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles.argumentsWithCombiner (1 samples, 0.90%)</title><rect x="95.0" y="803.0" width="10.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.0" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaFormEditor.foldArgumentsForm (1 samples, 0.90%)</title><rect x="95.0" y="787.0" width="10.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="98.0" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaFormEditor.makeArgumentCombinationForm (1 samples, 0.90%)</title><rect x="95.0" y="771.0" width="10.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="98.0" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$Name.&lt;init&gt; (1 samples, 0.90%)</title><rect x="95.0" y="755.0" width="10.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.0" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$NamedFunction.&lt;init&gt; (1 samples, 0.90%)</title><rect x="95.0" y="739.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.0" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.basicInvoker (1 samples, 0.90%)</title><rect x="95.0" y="723.0" width="10.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="98.0" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.invokeBasicMethod (1 samples, 0.90%)</title><rect x="95.0" y="707.0" width="10.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="98.0" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.resolveOrFail (1 samples, 0.90%)</title><rect x="95.0" y="691.0" width="10.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="98.0" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName$Factory.resolveOrFail (1 samples, 0.90%)</title><rect x="95.0" y="675.0" width="10.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="98.0" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName$Factory.resolve (1 samples, 0.90%)</title><rect x="95.0" y="659.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.0" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.resolve (1 samples, 0.90%)</title><rect x="95.0" y="643.0" width="10.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="98.0" y="654.0"></text>
</g>
<g>
<title>MHN_resolve_Mem (1 samples, 0.90%)</title><rect x="95.0" y="627.0" width="10.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="98.0" y="638.0"></text>
</g>
<g>
<title>MethodHandles::resolve_MemberName(Handle, Klass*, bool, Thread*) (1 samples, 0.90%)</title><rect x="95.0" y="611.0" width="10.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="98.0" y="622.0"></text>
</g>
<g>
<title>LinkResolver::resolve_handle_call(CallInfo&amp;, LinkInfo const&amp;, Thread*) (1 samples, 0.90%)</title><rect x="95.0" y="595.0" width="10.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="98.0" y="606.0"></text>
</g>
<g>
<title>SystemDictionary::find_method_handle_intrinsic(vmIntrinsics::ID, Symbol*, Thread*) (1 samples, 0.90%)</title><rect x="95.0" y="579.0" width="10.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="98.0" y="590.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.90%)</title><rect x="95.0" y="563.0" width="10.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="98.0" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::java_calling_convention(BasicType const*, VMRegPair*, int, int) (1 samples, 0.90%)</title><rect x="95.0" y="547.0" width="10.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="98.0" y="558.0"></text>
</g>
<g>
<title>pbouda/flamegraph/Inlining.main (45 samples, 40.54%)</title><rect x="105.7" y="899.0" width="478.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="108.7" y="910.0">pbouda/flamegraph/Inlining.main</text>
</g>
<g>
<title>java/lang/Thread.sleep (1 samples, 0.90%)</title><rect x="105.7" y="883.0" width="10.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="108.7" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.90%)</title><rect x="105.7" y="867.0" width="10.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="108.7" y="878.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.90%)</title><rect x="105.7" y="851.0" width="10.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="108.7" y="862.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.90%)</title><rect x="105.7" y="835.0" width="10.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="108.7" y="846.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.90%)</title><rect x="105.7" y="819.0" width="10.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="108.7" y="830.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.90%)</title><rect x="105.7" y="803.0" width="10.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="108.7" y="814.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.90%)</title><rect x="105.7" y="787.0" width="10.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="108.7" y="798.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.90%)</title><rect x="105.7" y="771.0" width="10.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="108.7" y="782.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.90%)</title><rect x="105.7" y="755.0" width="10.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="108.7" y="766.0"></text>
</g>
<g>
<title>pbouda/flamegraph/Inlining.method1 (44 samples, 39.64%)</title><rect x="116.3" y="883.0" width="467.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="119.3" y="894.0">pbouda/flamegraph/Inlining.method1</text>
</g>
<g>
<title>pbouda/flamegraph/Encrypt.encrypt (5 samples, 4.50%)</title><rect x="116.3" y="867.0" width="53.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="119.3" y="878.0">pboud..</text>
</g>
<g>
<title>java/math/BigInteger.toString (3 samples, 2.70%)</title><rect x="116.3" y="851.0" width="31.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="119.3" y="862.0">ja..</text>
</g>
<g>
<title>java/math/BigInteger.smallToString (3 samples, 2.70%)</title><rect x="116.3" y="835.0" width="31.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="119.3" y="846.0">ja..</text>
</g>
<g>
<title>java/math/MutableBigInteger.toBigInteger (1 samples, 0.90%)</title><rect x="137.6" y="819.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="140.6" y="830.0"></text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (1 samples, 0.90%)</title><rect x="137.6" y="803.0" width="10.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="140.6" y="814.0"></text>
</g>
<g>
<title>java/lang/Number.&lt;init&gt; (1 samples, 0.90%)</title><rect x="137.6" y="787.0" width="10.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="140.6" y="798.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.90%)</title><rect x="137.6" y="771.0" width="10.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="140.6" y="782.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.90%)</title><rect x="137.6" y="755.0" width="10.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="140.6" y="766.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.90%)</title><rect x="137.6" y="739.0" width="10.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="140.6" y="750.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.90%)</title><rect x="137.6" y="723.0" width="10.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="140.6" y="734.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (1 samples, 0.90%)</title><rect x="148.2" y="851.0" width="10.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="151.2" y="862.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (1 samples, 0.90%)</title><rect x="148.2" y="835.0" width="10.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="151.2" y="846.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (1 samples, 0.90%)</title><rect x="158.8" y="851.0" width="10.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="161.8" y="862.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (1 samples, 0.90%)</title><rect x="158.8" y="835.0" width="10.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="161.8" y="846.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (1 samples, 0.90%)</title><rect x="158.8" y="819.0" width="10.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="161.8" y="830.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getService (1 samples, 0.90%)</title><rect x="158.8" y="803.0" width="10.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="161.8" y="814.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderList.getProvider (1 samples, 0.90%)</title><rect x="158.8" y="787.0" width="10.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="161.8" y="798.0"></text>
</g>
<g>
<title>sun/security/jca/ProviderConfig.getProvider (1 samples, 0.90%)</title><rect x="158.8" y="771.0" width="10.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="161.8" y="782.0"></text>
</g>
<g>
<title>sun/security/provider/Sun.&lt;init&gt; (1 samples, 0.90%)</title><rect x="158.8" y="755.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="161.8" y="766.0"></text>
</g>
<g>
<title>sun/security/provider/Sun.putEntries (1 samples, 0.90%)</title><rect x="158.8" y="739.0" width="10.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="161.8" y="750.0"></text>
</g>
<g>
<title>java/security/Provider.putService (1 samples, 0.90%)</title><rect x="158.8" y="723.0" width="10.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="161.8" y="734.0"></text>
</g>
<g>
<title>java/security/Provider$ServiceKey.&lt;init&gt; (1 samples, 0.90%)</title><rect x="158.8" y="707.0" width="10.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="161.8" y="718.0"></text>
</g>
<g>
<title>java/lang/String.intern (1 samples, 0.90%)</title><rect x="158.8" y="691.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="161.8" y="702.0"></text>
</g>
<g>
<title>JVM_InternString (1 samples, 0.90%)</title><rect x="158.8" y="675.0" width="10.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="161.8" y="686.0"></text>
</g>
<g>
<title>StringTable::intern(oopDesc*, Thread*) (1 samples, 0.90%)</title><rect x="158.8" y="659.0" width="10.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="161.8" y="670.0"></text>
</g>
<g>
<title>StringTable::do_intern(Handle, unsigned short const*, int, unsigned long, Thread*) (1 samples, 0.90%)</title><rect x="158.8" y="643.0" width="10.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="161.8" y="654.0"></text>
</g>
<g>
<title>pbouda/flamegraph/Inlining.method2 (39 samples, 35.14%)</title><rect x="169.5" y="867.0" width="414.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="172.5" y="878.0">pbouda/flamegraph/Inlining.method2</text>
</g>
<g>
<title>pbouda/flamegraph/Encrypt.encrypt (1 samples, 0.90%)</title><rect x="169.5" y="851.0" width="10.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="172.5" y="862.0"></text>
</g>
<g>
<title>java/math/BigInteger.toString (1 samples, 0.90%)</title><rect x="169.5" y="835.0" width="10.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="172.5" y="846.0"></text>
</g>
<g>
<title>java/math/BigInteger.smallToString (1 samples, 0.90%)</title><rect x="169.5" y="819.0" width="10.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="172.5" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.90%)</title><rect x="169.5" y="803.0" width="10.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="172.5" y="814.0"></text>
</g>
<g>
<title>pbouda/flamegraph/Inlining.method3 (38 samples, 34.23%)</title><rect x="180.1" y="851.0" width="404.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="183.1" y="862.0">pbouda/flamegraph/Inlining.method3</text>
</g>
<g>
<title>pbouda/flamegraph/Encrypt.encrypt (7 samples, 6.31%)</title><rect x="180.1" y="835.0" width="74.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="183.1" y="846.0">pbouda/f..</text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (1 samples, 0.90%)</title><rect x="180.1" y="819.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="183.1" y="830.0"></text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (1 samples, 0.90%)</title><rect x="180.1" y="803.0" width="10.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="183.1" y="814.0"></text>
</g>
<g>
<title>java/math/BigInteger.stripLeadingZeroBytes (1 samples, 0.90%)</title><rect x="180.1" y="787.0" width="10.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="183.1" y="798.0"></text>
</g>
<g>
<title>java/math/BigInteger.toString (5 samples, 4.50%)</title><rect x="190.7" y="819.0" width="53.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="193.7" y="830.0">java/..</text>
</g>
<g>
<title>java/math/BigInteger.smallToString (5 samples, 4.50%)</title><rect x="190.7" y="803.0" width="53.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="193.7" y="814.0">java/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.90%)</title><rect x="190.7" y="787.0" width="10.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="193.7" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.90%)</title><rect x="190.7" y="771.0" width="10.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.7" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (1 samples, 0.90%)</title><rect x="190.7" y="755.0" width="10.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="193.7" y="766.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.90%)</title><rect x="190.7" y="739.0" width="10.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="193.7" y="750.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.90%)</title><rect x="190.7" y="723.0" width="10.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="193.7" y="734.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.90%)</title><rect x="190.7" y="707.0" width="10.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="193.7" y="718.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (4 samples, 3.60%)</title><rect x="201.4" y="787.0" width="42.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="204.4" y="798.0">java..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (4 samples, 3.60%)</title><rect x="201.4" y="771.0" width="42.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="204.4" y="782.0">java..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (4 samples, 3.60%)</title><rect x="201.4" y="755.0" width="42.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="204.4" y="766.0">java..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (3 samples, 2.70%)</title><rect x="201.4" y="739.0" width="31.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="204.4" y="750.0">ja..</text>
</g>
<g>
<title>java/math/MutableBigInteger.copyAndShift (1 samples, 0.90%)</title><rect x="222.6" y="723.0" width="10.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="225.6" y="734.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.90%)</title><rect x="222.6" y="707.0" width="10.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="225.6" y="718.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.90%)</title><rect x="222.6" y="691.0" width="10.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="225.6" y="702.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.90%)</title><rect x="222.6" y="675.0" width="10.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="225.6" y="686.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.90%)</title><rect x="222.6" y="659.0" width="10.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="225.6" y="670.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.90%)</title><rect x="222.6" y="643.0" width="10.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="225.6" y="654.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.getLowestSetBit (1 samples, 0.90%)</title><rect x="233.2" y="739.0" width="10.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.2" y="750.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (1 samples, 0.90%)</title><rect x="243.9" y="819.0" width="10.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.9" y="830.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (1 samples, 0.90%)</title><rect x="243.9" y="803.0" width="10.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.9" y="814.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (1 samples, 0.90%)</title><rect x="243.9" y="787.0" width="10.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="246.9" y="798.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (1 samples, 0.90%)</title><rect x="243.9" y="771.0" width="10.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="246.9" y="782.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (1 samples, 0.90%)</title><rect x="243.9" y="755.0" width="10.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.9" y="766.0"></text>
</g>
<g>
<title>java/security/Provider.newInstanceUtil (1 samples, 0.90%)</title><rect x="243.9" y="739.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.9" y="750.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.90%)</title><rect x="243.9" y="723.0" width="10.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="246.9" y="734.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstanceWithCaller (1 samples, 0.90%)</title><rect x="243.9" y="707.0" width="10.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="246.9" y="718.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.90%)</title><rect x="243.9" y="691.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="246.9" y="702.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.90%)</title><rect x="243.9" y="675.0" width="10.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.9" y="686.0"></text>
</g>
<g>
<title>sun/security/provider/SHA5$SHA512.&lt;init&gt; (1 samples, 0.90%)</title><rect x="243.9" y="659.0" width="10.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.9" y="670.0"></text>
</g>
<g>
<title>sun/security/provider/SHA5.&lt;init&gt; (1 samples, 0.90%)</title><rect x="243.9" y="643.0" width="10.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="246.9" y="654.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.&lt;init&gt; (1 samples, 0.90%)</title><rect x="243.9" y="627.0" width="10.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="246.9" y="638.0"></text>
</g>
<g>
<title>pbouda/flamegraph/Inlining.method4 (31 samples, 27.93%)</title><rect x="254.5" y="835.0" width="329.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="257.5" y="846.0">pbouda/flamegraph/Inlining.method4</text>
</g>
<g>
<title>pbouda/flamegraph/Encrypt.encrypt (3 samples, 2.70%)</title><rect x="254.5" y="819.0" width="31.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.5" y="830.0">pb..</text>
</g>
<g>
<title>java/math/BigInteger.toString (3 samples, 2.70%)</title><rect x="254.5" y="803.0" width="31.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="257.5" y="814.0">ja..</text>
</g>
<g>
<title>java/math/BigInteger.smallToString (3 samples, 2.70%)</title><rect x="254.5" y="787.0" width="31.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="257.5" y="798.0">ja..</text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.90%)</title><rect x="254.5" y="771.0" width="10.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.90%)</title><rect x="254.5" y="755.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="257.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.90%)</title><rect x="254.5" y="739.0" width="10.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="257.5" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.90%)</title><rect x="254.5" y="723.0" width="10.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="257.5" y="734.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (2 samples, 1.80%)</title><rect x="265.1" y="771.0" width="21.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.1" y="782.0">j..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (2 samples, 1.80%)</title><rect x="265.1" y="755.0" width="21.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.1" y="766.0">j..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (2 samples, 1.80%)</title><rect x="265.1" y="739.0" width="21.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="268.1" y="750.0">j..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (2 samples, 1.80%)</title><rect x="265.1" y="723.0" width="21.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.1" y="734.0">j..</text>
</g>
<g>
<title>java/math/MutableBigInteger.copyAndShift (1 samples, 0.90%)</title><rect x="275.8" y="707.0" width="10.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.8" y="718.0"></text>
</g>
<g>
<title>pbouda/flamegraph/Inlining.method5 (28 samples, 25.23%)</title><rect x="286.4" y="819.0" width="297.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.4" y="830.0">pbouda/flamegraph/Inlining.method5</text>
</g>
<g>
<title>pbouda/flamegraph/Encrypt.encrypt (5 samples, 4.50%)</title><rect x="286.4" y="803.0" width="53.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="289.4" y="814.0">pboud..</text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (1 samples, 0.90%)</title><rect x="286.4" y="787.0" width="10.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.4" y="798.0"></text>
</g>
<g>
<title>java/math/BigInteger.&lt;init&gt; (1 samples, 0.90%)</title><rect x="286.4" y="771.0" width="10.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.4" y="782.0"></text>
</g>
<g>
<title>java/math/BigInteger.stripLeadingZeroBytes (1 samples, 0.90%)</title><rect x="286.4" y="755.0" width="10.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="289.4" y="766.0"></text>
</g>
<g>
<title>java/math/BigInteger.toString (4 samples, 3.60%)</title><rect x="297.0" y="787.0" width="42.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="300.0" y="798.0">java..</text>
</g>
<g>
<title>java/math/BigInteger.smallToString (4 samples, 3.60%)</title><rect x="297.0" y="771.0" width="42.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="300.0" y="782.0">java..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (2 samples, 1.80%)</title><rect x="307.7" y="755.0" width="21.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.7" y="766.0">j..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (2 samples, 1.80%)</title><rect x="307.7" y="739.0" width="21.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="310.7" y="750.0">j..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (2 samples, 1.80%)</title><rect x="307.7" y="723.0" width="21.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="310.7" y="734.0">j..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (2 samples, 1.80%)</title><rect x="307.7" y="707.0" width="21.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="310.7" y="718.0">j..</text>
</g>
<g>
<title>java/math/MutableBigInteger.toBigInteger (1 samples, 0.90%)</title><rect x="328.9" y="755.0" width="10.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="331.9" y="766.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.getMagnitudeArray (1 samples, 0.90%)</title><rect x="328.9" y="739.0" width="10.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="331.9" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.90%)</title><rect x="328.9" y="723.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="331.9" y="734.0"></text>
</g>
<g>
<title>pbouda/flamegraph/Inlining.method6 (23 samples, 20.72%)</title><rect x="339.5" y="803.0" width="244.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="342.5" y="814.0">pbouda/flamegraph/Inlining.method6</text>
</g>
<g>
<title>pbouda/flamegraph/Encrypt.encrypt (4 samples, 3.60%)</title><rect x="339.5" y="787.0" width="42.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="342.5" y="798.0">pbou..</text>
</g>
<g>
<title>java/math/BigInteger.toString (1 samples, 0.90%)</title><rect x="339.5" y="771.0" width="10.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="342.5" y="782.0"></text>
</g>
<g>
<title>java/math/BigInteger.smallToString (1 samples, 0.90%)</title><rect x="339.5" y="755.0" width="10.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="342.5" y="766.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (1 samples, 0.90%)</title><rect x="339.5" y="739.0" width="10.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="342.5" y="750.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (1 samples, 0.90%)</title><rect x="339.5" y="723.0" width="10.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="342.5" y="734.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (1 samples, 0.90%)</title><rect x="339.5" y="707.0" width="10.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="342.5" y="718.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (1 samples, 0.90%)</title><rect x="339.5" y="691.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="342.5" y="702.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (3 samples, 2.70%)</title><rect x="350.2" y="771.0" width="31.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="353.2" y="782.0">ja..</text>
</g>
<g>
<title>java/security/Security.getImpl (3 samples, 2.70%)</title><rect x="350.2" y="755.0" width="31.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="353.2" y="766.0">ja..</text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (3 samples, 2.70%)</title><rect x="350.2" y="739.0" width="31.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="353.2" y="750.0">su..</text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (3 samples, 2.70%)</title><rect x="350.2" y="723.0" width="31.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="353.2" y="734.0">su..</text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (1 samples, 0.90%)</title><rect x="350.2" y="707.0" width="10.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="353.2" y="718.0"></text>
</g>
<g>
<title>java/security/Provider.newInstanceUtil (1 samples, 0.90%)</title><rect x="350.2" y="691.0" width="10.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="353.2" y="702.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.90%)</title><rect x="350.2" y="675.0" width="10.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="353.2" y="686.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstanceWithCaller (1 samples, 0.90%)</title><rect x="350.2" y="659.0" width="10.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="353.2" y="670.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.90%)</title><rect x="350.2" y="643.0" width="10.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="353.2" y="654.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.90%)</title><rect x="350.2" y="627.0" width="10.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="353.2" y="638.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.90%)</title><rect x="350.2" y="611.0" width="10.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="353.2" y="622.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="595.0" width="10.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="353.2" y="606.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="579.0" width="10.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="353.2" y="590.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="563.0" width="10.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="353.2" y="574.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="547.0" width="10.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="353.2" y="558.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="531.0" width="10.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="353.2" y="542.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="515.0" width="10.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="353.2" y="526.0"></text>
</g>
<g>
<title>ClassFileParser::post_process_parsed_stream(ClassFileStream const*, ConstantPool*, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="499.0" width="10.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="353.2" y="510.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="483.0" width="10.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="353.2" y="494.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="467.0" width="10.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="353.2" y="478.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="451.0" width="10.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="353.2" y="462.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="435.0" width="10.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="353.2" y="446.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="419.0" width="10.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="353.2" y="430.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="403.0" width="10.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="353.2" y="414.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) [clone .part.153] (1 samples, 0.90%)</title><rect x="350.2" y="387.0" width="10.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="353.2" y="398.0"></text>
</g>
<g>
<title>ClassFileParser::parse_interfaces(ClassFileStream const*, int, ConstantPool*, bool*, Thread*) [clone .part.151] (1 samples, 0.90%)</title><rect x="350.2" y="371.0" width="10.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="353.2" y="382.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_super_or_fail(Symbol*, Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="355.0" width="10.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="353.2" y="366.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="339.0" width="10.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="353.2" y="350.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="323.0" width="10.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="353.2" y="334.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="307.0" width="10.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="353.2" y="318.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="291.0" width="10.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="353.2" y="302.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="275.0" width="10.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="353.2" y="286.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) [clone .part.153] (1 samples, 0.90%)</title><rect x="350.2" y="259.0" width="10.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="353.2" y="270.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="243.0" width="10.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="353.2" y="254.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.90%)</title><rect x="350.2" y="227.0" width="10.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="353.2" y="238.0"></text>
</g>
<g>
<title>SymbolTable::new_symbols(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*) (1 samples, 0.90%)</title><rect x="350.2" y="211.0" width="10.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="353.2" y="222.0"></text>
</g>
<g>
<title>SymbolTable::do_add_if_needed(char const*, int, unsigned long, bool) (1 samples, 0.90%)</title><rect x="350.2" y="195.0" width="10.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="353.2" y="206.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (1 samples, 0.90%)</title><rect x="350.2" y="179.0" width="10.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="353.2" y="190.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.checkSuperClass (2 samples, 1.80%)</title><rect x="360.8" y="707.0" width="21.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="363.8" y="718.0">s..</text>
</g>
<g>
<title>java/lang/Class.isAssignableFrom (1 samples, 0.90%)</title><rect x="371.4" y="691.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="374.4" y="702.0"></text>
</g>
<g>
<title>jni_IsAssignableFrom (1 samples, 0.90%)</title><rect x="371.4" y="675.0" width="10.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="374.4" y="686.0"></text>
</g>
<g>
<title>pbouda/flamegraph/Inlining.method7 (19 samples, 17.12%)</title><rect x="382.1" y="787.0" width="202.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="385.1" y="798.0">pbouda/flamegraph/Inlining..</text>
</g>
<g>
<title>pbouda/flamegraph/Inlining.method8 (19 samples, 17.12%)</title><rect x="382.1" y="771.0" width="202.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="385.1" y="782.0">pbouda/flamegraph/Inlining..</text>
</g>
<g>
<title>pbouda/flamegraph/Encrypt.encrypt (3 samples, 2.70%)</title><rect x="382.1" y="755.0" width="31.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.1" y="766.0">pb..</text>
</g>
<g>
<title>java/math/BigInteger.toString (2 samples, 1.80%)</title><rect x="382.1" y="739.0" width="21.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="385.1" y="750.0">j..</text>
</g>
<g>
<title>java/math/BigInteger.smallToString (2 samples, 1.80%)</title><rect x="382.1" y="723.0" width="21.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="385.1" y="734.0">j..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (1 samples, 0.90%)</title><rect x="392.7" y="707.0" width="10.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="395.7" y="718.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (1 samples, 0.90%)</title><rect x="392.7" y="691.0" width="10.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="395.7" y="702.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (1 samples, 0.90%)</title><rect x="392.7" y="675.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="395.7" y="686.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (1 samples, 0.90%)</title><rect x="392.7" y="659.0" width="10.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="395.7" y="670.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.90%)</title><rect x="392.7" y="643.0" width="10.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="395.7" y="654.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.90%)</title><rect x="392.7" y="627.0" width="10.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="395.7" y="638.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.90%)</title><rect x="392.7" y="611.0" width="10.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="395.7" y="622.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.90%)</title><rect x="392.7" y="595.0" width="10.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="395.7" y="606.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.90%)</title><rect x="392.7" y="579.0" width="10.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="395.7" y="590.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.90%)</title><rect x="392.7" y="563.0" width="10.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="395.7" y="574.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.90%)</title><rect x="392.7" y="547.0" width="10.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="395.7" y="558.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.90%)</title><rect x="392.7" y="531.0" width="10.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="395.7" y="542.0"></text>
</g>
<g>
<title>clear_page_erms (1 samples, 0.90%)</title><rect x="392.7" y="515.0" width="10.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="395.7" y="526.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (1 samples, 0.90%)</title><rect x="403.3" y="739.0" width="10.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.3" y="750.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (1 samples, 0.90%)</title><rect x="403.3" y="723.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="406.3" y="734.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (1 samples, 0.90%)</title><rect x="403.3" y="707.0" width="10.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="406.3" y="718.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (1 samples, 0.90%)</title><rect x="403.3" y="691.0" width="10.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="406.3" y="702.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (1 samples, 0.90%)</title><rect x="403.3" y="675.0" width="10.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="406.3" y="686.0"></text>
</g>
<g>
<title>java/security/Provider.newInstanceUtil (1 samples, 0.90%)</title><rect x="403.3" y="659.0" width="10.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="406.3" y="670.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.90%)</title><rect x="403.3" y="643.0" width="10.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="406.3" y="654.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstanceWithCaller (1 samples, 0.90%)</title><rect x="403.3" y="627.0" width="10.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.3" y="638.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.90%)</title><rect x="403.3" y="611.0" width="10.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="406.3" y="622.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.90%)</title><rect x="403.3" y="595.0" width="10.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="406.3" y="606.0"></text>
</g>
<g>
<title>sun/security/provider/SHA5$SHA512.&lt;init&gt; (1 samples, 0.90%)</title><rect x="403.3" y="579.0" width="10.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="406.3" y="590.0"></text>
</g>
<g>
<title>sun/security/provider/SHA5.&lt;init&gt; (1 samples, 0.90%)</title><rect x="403.3" y="563.0" width="10.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="406.3" y="574.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.90%)</title><rect x="403.3" y="547.0" width="10.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="406.3" y="558.0"></text>
</g>
<g>
<title>pbouda/flamegraph/Inlining.method9 (16 samples, 14.41%)</title><rect x="414.0" y="755.0" width="170.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="417.0" y="766.0">pbouda/flamegraph/Inli..</text>
</g>
<g>
<title>pbouda/flamegraph/Encrypt.encrypt (3 samples, 2.70%)</title><rect x="414.0" y="739.0" width="31.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="417.0" y="750.0">pb..</text>
</g>
<g>
<title>java/math/BigInteger.toString (1 samples, 0.90%)</title><rect x="414.0" y="723.0" width="10.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="417.0" y="734.0"></text>
</g>
<g>
<title>java/math/BigInteger.smallToString (1 samples, 0.90%)</title><rect x="414.0" y="707.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="417.0" y="718.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (1 samples, 0.90%)</title><rect x="414.0" y="691.0" width="10.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="417.0" y="702.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (1 samples, 0.90%)</title><rect x="414.0" y="675.0" width="10.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="417.0" y="686.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (1 samples, 0.90%)</title><rect x="414.0" y="659.0" width="10.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="417.0" y="670.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (1 samples, 0.90%)</title><rect x="414.0" y="643.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="417.0" y="654.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.unsignedLongCompare (1 samples, 0.90%)</title><rect x="414.0" y="627.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="417.0" y="638.0"></text>
</g>
<g>
<title>java/security/MessageDigest.digest (1 samples, 0.90%)</title><rect x="424.6" y="723.0" width="10.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="427.6" y="734.0"></text>
</g>
<g>
<title>java/security/MessageDigest.update (1 samples, 0.90%)</title><rect x="424.6" y="707.0" width="10.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="427.6" y="718.0"></text>
</g>
<g>
<title>java/security/MessageDigest$Delegate.engineUpdate (1 samples, 0.90%)</title><rect x="424.6" y="691.0" width="10.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="427.6" y="702.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.engineUpdate (1 samples, 0.90%)</title><rect x="424.6" y="675.0" width="10.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="427.6" y="686.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.implCompressMultiBlock (1 samples, 0.90%)</title><rect x="424.6" y="659.0" width="10.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="427.6" y="670.0"></text>
</g>
<g>
<title>sun/security/provider/DigestBase.implCompressMultiBlock0 (1 samples, 0.90%)</title><rect x="424.6" y="643.0" width="10.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="427.6" y="654.0"></text>
</g>
<g>
<title>sun/security/provider/SHA5.implCompress (1 samples, 0.90%)</title><rect x="424.6" y="627.0" width="10.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="427.6" y="638.0"></text>
</g>
<g>
<title>sun/security/provider/SHA5.implCompress0 (1 samples, 0.90%)</title><rect x="424.6" y="611.0" width="10.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="427.6" y="622.0"></text>
</g>
<g>
<title>java/security/MessageDigest.getInstance (1 samples, 0.90%)</title><rect x="435.2" y="723.0" width="10.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="438.2" y="734.0"></text>
</g>
<g>
<title>java/security/Security.getImpl (1 samples, 0.90%)</title><rect x="435.2" y="707.0" width="10.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="438.2" y="718.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (1 samples, 0.90%)</title><rect x="435.2" y="691.0" width="10.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="438.2" y="702.0"></text>
</g>
<g>
<title>sun/security/jca/GetInstance.getInstance (1 samples, 0.90%)</title><rect x="435.2" y="675.0" width="10.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="438.2" y="686.0"></text>
</g>
<g>
<title>java/security/Provider$Service.newInstance (1 samples, 0.90%)</title><rect x="435.2" y="659.0" width="10.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="438.2" y="670.0"></text>
</g>
<g>
<title>java/security/Provider.newInstanceUtil (1 samples, 0.90%)</title><rect x="435.2" y="643.0" width="10.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="438.2" y="654.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (1 samples, 0.90%)</title><rect x="435.2" y="627.0" width="10.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="438.2" y="638.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (1 samples, 0.90%)</title><rect x="435.2" y="611.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="438.2" y="622.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (1 samples, 0.90%)</title><rect x="435.2" y="595.0" width="10.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="438.2" y="606.0"></text>
</g>
<g>
<title>pbouda/flamegraph/Inlining.method10 (13 samples, 11.71%)</title><rect x="445.9" y="739.0" width="138.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="448.9" y="750.0">pbouda/flamegraph..</text>
</g>
<g>
<title>java/io/PrintStream.println (6 samples, 5.41%)</title><rect x="445.9" y="723.0" width="63.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="448.9" y="734.0">java/io..</text>
</g>
<g>
<title>java/io/PrintStream.writeln (6 samples, 5.41%)</title><rect x="445.9" y="707.0" width="63.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="448.9" y="718.0">java/io..</text>
</g>
<g>
<title>java/io/BufferedWriter.flushBuffer (1 samples, 0.90%)</title><rect x="445.9" y="691.0" width="10.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="448.9" y="702.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.write (1 samples, 0.90%)</title><rect x="445.9" y="675.0" width="10.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="448.9" y="686.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.write (1 samples, 0.90%)</title><rect x="445.9" y="659.0" width="10.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="448.9" y="670.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implWrite (1 samples, 0.90%)</title><rect x="445.9" y="643.0" width="10.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="448.9" y="654.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.wrap (1 samples, 0.90%)</title><rect x="445.9" y="627.0" width="10.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="448.9" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapCharBuffer.&lt;init&gt; (1 samples, 0.90%)</title><rect x="445.9" y="611.0" width="10.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="448.9" y="622.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.&lt;init&gt; (1 samples, 0.90%)</title><rect x="445.9" y="595.0" width="10.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="448.9" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.90%)</title><rect x="445.9" y="579.0" width="10.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="448.9" y="590.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.limit (1 samples, 0.90%)</title><rect x="445.9" y="563.0" width="10.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="448.9" y="574.0"></text>
</g>
<g>
<title>java/nio/CharBuffer.limit (1 samples, 0.90%)</title><rect x="445.9" y="547.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="448.9" y="558.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.90%)</title><rect x="445.9" y="531.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="448.9" y="542.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flushBuffer (4 samples, 3.60%)</title><rect x="456.5" y="691.0" width="42.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="459.5" y="702.0">java..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (4 samples, 3.60%)</title><rect x="456.5" y="675.0" width="42.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="459.5" y="686.0">sun/..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (4 samples, 3.60%)</title><rect x="456.5" y="659.0" width="42.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="459.5" y="670.0">sun/..</text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (4 samples, 3.60%)</title><rect x="456.5" y="643.0" width="42.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="459.5" y="654.0">sun/..</text>
</g>
<g>
<title>java/io/PrintStream.write (4 samples, 3.60%)</title><rect x="456.5" y="627.0" width="42.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="459.5" y="638.0">java..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (4 samples, 3.60%)</title><rect x="456.5" y="611.0" width="42.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="459.5" y="622.0">java..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (4 samples, 3.60%)</title><rect x="456.5" y="595.0" width="42.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="459.5" y="606.0">java..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (4 samples, 3.60%)</title><rect x="456.5" y="579.0" width="42.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="459.5" y="590.0">java..</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (4 samples, 3.60%)</title><rect x="456.5" y="563.0" width="42.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="459.5" y="574.0">java..</text>
</g>
<g>
<title>[unknown] (4 samples, 3.60%)</title><rect x="456.5" y="547.0" width="42.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="459.5" y="558.0">[unk..</text>
</g>
<g>
<title>__write (4 samples, 3.60%)</title><rect x="456.5" y="531.0" width="42.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="459.5" y="542.0">__wr..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 2.70%)</title><rect x="467.1" y="515.0" width="31.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="470.1" y="526.0">en..</text>
</g>
<g>
<title>do_syscall_64 (3 samples, 2.70%)</title><rect x="467.1" y="499.0" width="31.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="470.1" y="510.0">do..</text>
</g>
<g>
<title>__x64_sys_write (3 samples, 2.70%)</title><rect x="467.1" y="483.0" width="31.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="470.1" y="494.0">__..</text>
</g>
<g>
<title>ksys_write (3 samples, 2.70%)</title><rect x="467.1" y="467.0" width="31.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="470.1" y="478.0">ks..</text>
</g>
<g>
<title>vfs_write (3 samples, 2.70%)</title><rect x="467.1" y="451.0" width="31.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="470.1" y="462.0">vf..</text>
</g>
<g>
<title>__vfs_write (2 samples, 1.80%)</title><rect x="467.1" y="435.0" width="21.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="470.1" y="446.0">_..</text>
</g>
<g>
<title>tty_write (2 samples, 1.80%)</title><rect x="467.1" y="419.0" width="21.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="470.1" y="430.0">t..</text>
</g>
<g>
<title>n_tty_write (1 samples, 0.90%)</title><rect x="467.1" y="403.0" width="10.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="470.1" y="414.0"></text>
</g>
<g>
<title>pty_write (1 samples, 0.90%)</title><rect x="467.1" y="387.0" width="10.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="470.1" y="398.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.90%)</title><rect x="467.1" y="371.0" width="10.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="470.1" y="382.0"></text>
</g>
<g>
<title>tty_write_unlock (1 samples, 0.90%)</title><rect x="477.7" y="403.0" width="10.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="480.7" y="414.0"></text>
</g>
<g>
<title>mutex_unlock (1 samples, 0.90%)</title><rect x="477.7" y="387.0" width="10.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="480.7" y="398.0"></text>
</g>
<g>
<title>rw_verify_area (1 samples, 0.90%)</title><rect x="488.4" y="435.0" width="10.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="491.4" y="446.0"></text>
</g>
<g>
<title>security_file_permission (1 samples, 0.90%)</title><rect x="488.4" y="419.0" width="10.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="491.4" y="430.0"></text>
</g>
<g>
<title>apparmor_file_permission (1 samples, 0.90%)</title><rect x="488.4" y="403.0" width="10.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="491.4" y="414.0"></text>
</g>
<g>
<title>common_file_perm (1 samples, 0.90%)</title><rect x="488.4" y="387.0" width="10.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="491.4" y="398.0"></text>
</g>
<g>
<title>java/io/Writer.write (1 samples, 0.90%)</title><rect x="499.0" y="691.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="502.0" y="702.0"></text>
</g>
<g>
<title>java/io/BufferedWriter.write (1 samples, 0.90%)</title><rect x="499.0" y="675.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="502.0" y="686.0"></text>
</g>
<g>
<title>java/lang/String.getChars (1 samples, 0.90%)</title><rect x="499.0" y="659.0" width="10.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="502.0" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 1.80%)</title><rect x="509.6" y="723.0" width="21.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="512.6" y="734.0">j..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/81628611.invoke (2 samples, 1.80%)</title><rect x="509.6" y="707.0" width="21.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="512.6" y="718.0">j..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.90%)</title><rect x="509.6" y="691.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="512.6" y="702.0"></text>
</g>
<g>
<title>_linkToStatic (1 samples, 0.90%)</title><rect x="509.6" y="675.0" width="10.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="512.6" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1149319664.invoke (1 samples, 0.90%)</title><rect x="520.3" y="691.0" width="10.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="523.3" y="702.0"></text>
</g>
<g>
<title>_invokeBasic (1 samples, 0.90%)</title><rect x="520.3" y="675.0" width="10.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="523.3" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkMethodHandleConstant (1 samples, 0.90%)</title><rect x="530.9" y="723.0" width="10.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="533.9" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.linkMethodHandleConstant (1 samples, 0.90%)</title><rect x="530.9" y="707.0" width="10.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="533.9" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.getDirectMethodForConstant (1 samples, 0.90%)</title><rect x="530.9" y="691.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="533.9" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.getDirectMethodNoSecurityManager (1 samples, 0.90%)</title><rect x="530.9" y="675.0" width="10.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="533.9" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.getDirectMethodCommon (1 samples, 0.90%)</title><rect x="530.9" y="659.0" width="10.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="533.9" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.setVarargs (1 samples, 0.90%)</title><rect x="530.9" y="643.0" width="10.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="533.9" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.withVarargs (1 samples, 0.90%)</title><rect x="530.9" y="627.0" width="10.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="533.9" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.asVarargsCollector (1 samples, 0.90%)</title><rect x="530.9" y="611.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="533.9" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleImpl.makeVarargsCollector (1 samples, 0.90%)</title><rect x="530.9" y="595.0" width="10.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="533.9" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleImpl$AsVarargsCollector.&lt;init&gt; (1 samples, 0.90%)</title><rect x="530.9" y="579.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="533.9" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleImpl$AsVarargsCollector.&lt;init&gt; (1 samples, 0.90%)</title><rect x="530.9" y="563.0" width="10.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="533.9" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle.&lt;init&gt; (1 samples, 0.90%)</title><rect x="530.9" y="547.0" width="10.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="533.9" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle.chooseDelegatingForm (1 samples, 0.90%)</title><rect x="530.9" y="531.0" width="10.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="533.9" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle.makeReinvokerForm (1 samples, 0.90%)</title><rect x="530.9" y="515.0" width="10.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="533.9" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle.makeReinvokerForm (1 samples, 0.90%)</title><rect x="530.9" y="499.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="533.9" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$Name.&lt;init&gt; (1 samples, 0.90%)</title><rect x="530.9" y="483.0" width="10.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="533.9" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$NamedFunction.&lt;init&gt; (1 samples, 0.90%)</title><rect x="530.9" y="467.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="533.9" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.basicInvoker (1 samples, 0.90%)</title><rect x="530.9" y="451.0" width="10.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="533.9" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.invokeBasicMethod (1 samples, 0.90%)</title><rect x="530.9" y="435.0" width="10.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="533.9" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.resolveOrFail (1 samples, 0.90%)</title><rect x="530.9" y="419.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="533.9" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName$Factory.resolveOrFail (1 samples, 0.90%)</title><rect x="530.9" y="403.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="533.9" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName$Factory.resolve (1 samples, 0.90%)</title><rect x="530.9" y="387.0" width="10.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="533.9" y="398.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.resolve (1 samples, 0.90%)</title><rect x="530.9" y="371.0" width="10.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="533.9" y="382.0"></text>
</g>
<g>
<title>MHN_resolve_Mem (1 samples, 0.90%)</title><rect x="530.9" y="355.0" width="10.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="533.9" y="366.0"></text>
</g>
<g>
<title>MethodHandles::resolve_MemberName(Handle, Klass*, bool, Thread*) (1 samples, 0.90%)</title><rect x="530.9" y="339.0" width="10.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="533.9" y="350.0"></text>
</g>
<g>
<title>LinkResolver::resolve_handle_call(CallInfo&amp;, LinkInfo const&amp;, Thread*) (1 samples, 0.90%)</title><rect x="530.9" y="323.0" width="10.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="533.9" y="334.0"></text>
</g>
<g>
<title>SystemDictionary::find_method_handle_intrinsic(vmIntrinsics::ID, Symbol*, Thread*) (1 samples, 0.90%)</title><rect x="530.9" y="307.0" width="10.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="533.9" y="318.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.90%)</title><rect x="530.9" y="291.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="533.9" y="302.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&amp;, int, BasicType*, VMRegPair*, BasicType, unsigned char*) (1 samples, 0.90%)</title><rect x="530.9" y="275.0" width="10.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="533.9" y="286.0"></text>
</g>
<g>
<title>MethodHandles::generate_method_handle_dispatch(MacroAssembler*, vmIntrinsics::ID, RegisterImpl*, RegisterImpl*, bool) (1 samples, 0.90%)</title><rect x="530.9" y="259.0" width="10.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="533.9" y="270.0"></text>
</g>
<g>
<title>MethodHandles::jump_to_lambda_form(MacroAssembler*, RegisterImpl*, RegisterImpl*, RegisterImpl*, bool) (1 samples, 0.90%)</title><rect x="530.9" y="243.0" width="10.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="533.9" y="254.0"></text>
</g>
<g>
<title>MacroAssembler::load_heap_oop(RegisterImpl*, Address, RegisterImpl*, RegisterImpl*, unsigned long) (1 samples, 0.90%)</title><rect x="530.9" y="227.0" width="10.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="533.9" y="238.0"></text>
</g>
<g>
<title>G1BarrierSetAssembler::load_at(MacroAssembler*, unsigned long, BasicType, RegisterImpl*, Address, RegisterImpl*, RegisterImpl*) (1 samples, 0.90%)</title><rect x="530.9" y="211.0" width="10.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="533.9" y="222.0"></text>
</g>
<g>
<title>BarrierSetAssembler::load_at(MacroAssembler*, unsigned long, BasicType, RegisterImpl*, Address, RegisterImpl*, RegisterImpl*) (1 samples, 0.90%)</title><rect x="530.9" y="195.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="533.9" y="206.0"></text>
</g>
<g>
<title>pbouda/flamegraph/Encrypt.encrypt (4 samples, 3.60%)</title><rect x="541.5" y="723.0" width="42.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="544.5" y="734.0">pbou..</text>
</g>
<g>
<title>java/math/BigInteger.toString (4 samples, 3.60%)</title><rect x="541.5" y="707.0" width="42.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="544.5" y="718.0">java..</text>
</g>
<g>
<title>java/math/BigInteger.smallToString (4 samples, 3.60%)</title><rect x="541.5" y="691.0" width="42.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="544.5" y="702.0">java..</text>
</g>
<g>
<title>java/math/MutableBigInteger.&lt;init&gt; (1 samples, 0.90%)</title><rect x="552.2" y="675.0" width="10.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="555.2" y="686.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.90%)</title><rect x="552.2" y="659.0" width="10.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="555.2" y="670.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (2 samples, 1.80%)</title><rect x="562.8" y="675.0" width="21.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="565.8" y="686.0">j..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (2 samples, 1.80%)</title><rect x="562.8" y="659.0" width="21.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="565.8" y="670.0">j..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divideKnuth (2 samples, 1.80%)</title><rect x="562.8" y="643.0" width="21.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="565.8" y="654.0">j..</text>
</g>
<g>
<title>java/math/MutableBigInteger.divideMagnitude (2 samples, 1.80%)</title><rect x="562.8" y="627.0" width="21.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="565.8" y="638.0">j..</text>
</g>
<g>
<title>java/math/MutableBigInteger.copyAndShift (2 samples, 1.80%)</title><rect x="562.8" y="611.0" width="21.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="565.8" y="622.0">j..</text>
</g>
<g>
<title>page_fault (1 samples, 0.90%)</title><rect x="573.4" y="595.0" width="10.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="576.4" y="606.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.90%)</title><rect x="573.4" y="579.0" width="10.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="576.4" y="590.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.90%)</title><rect x="573.4" y="563.0" width="10.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="576.4" y="574.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.90%)</title><rect x="573.4" y="547.0" width="10.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="576.4" y="558.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.90%)</title><rect x="573.4" y="531.0" width="10.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="576.4" y="542.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.90%)</title><rect x="573.4" y="515.0" width="10.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="576.4" y="526.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.90%)</title><rect x="573.4" y="499.0" width="10.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="576.4" y="510.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.90%)</title><rect x="573.4" y="483.0" width="10.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="576.4" y="494.0"></text>
</g>
<g>
<title>clear_page_erms (1 samples, 0.90%)</title><rect x="573.4" y="467.0" width="10.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="576.4" y="478.0"></text>
</g>
<g>
<title>start_thread (57 samples, 51.35%)</title><rect x="584.1" y="899.0" width="605.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="587.1" y="910.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (57 samples, 51.35%)</title><rect x="584.1" y="883.0" width="605.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="587.1" y="894.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (57 samples, 51.35%)</title><rect x="584.1" y="867.0" width="605.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="587.1" y="878.0">Thread::call_run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (56 samples, 50.45%)</title><rect x="584.1" y="851.0" width="595.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="587.1" y="862.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (55 samples, 49.55%)</title><rect x="584.1" y="835.0" width="584.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="587.1" y="846.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (55 samples, 49.55%)</title><rect x="584.1" y="819.0" width="584.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="587.1" y="830.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (43 samples, 38.74%)</title><rect x="584.1" y="803.0" width="457.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="587.1" y="814.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (43 samples, 38.74%)</title><rect x="584.1" y="787.0" width="457.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="587.1" y="798.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, boo..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.90%)</title><rect x="584.1" y="771.0" width="10.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="587.1" y="782.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.90%)</title><rect x="584.1" y="755.0" width="10.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="587.1" y="766.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.90%)</title><rect x="584.1" y="739.0" width="10.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="587.1" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.90%)</title><rect x="584.1" y="723.0" width="10.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="587.1" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.90%)</title><rect x="584.1" y="707.0" width="10.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="587.1" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.90%)</title><rect x="584.1" y="691.0" width="10.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="587.1" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.90%)</title><rect x="584.1" y="675.0" width="10.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="587.1" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.90%)</title><rect x="584.1" y="659.0" width="10.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="587.1" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.90%)</title><rect x="584.1" y="643.0" width="10.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="587.1" y="654.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.90%)</title><rect x="584.1" y="627.0" width="10.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="587.1" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_local_signature() (1 samples, 0.90%)</title><rect x="584.1" y="611.0" width="10.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="587.1" y="622.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (19 samples, 17.12%)</title><rect x="594.7" y="771.0" width="202.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="597.7" y="782.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.90%)</title><rect x="594.7" y="755.0" width="10.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="597.7" y="766.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.90%)</title><rect x="594.7" y="739.0" width="10.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="597.7" y="750.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.90%)</title><rect x="594.7" y="723.0" width="10.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="597.7" y="734.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.90%)</title><rect x="594.7" y="707.0" width="10.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="597.7" y="718.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.90%)</title><rect x="594.7" y="691.0" width="10.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="597.7" y="702.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.90%)</title><rect x="594.7" y="675.0" width="10.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="597.7" y="686.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.90%)</title><rect x="594.7" y="659.0" width="10.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="597.7" y="670.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.90%)</title><rect x="594.7" y="643.0" width="10.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="597.7" y="654.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.90%)</title><rect x="594.7" y="627.0" width="10.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="597.7" y="638.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.90%)</title><rect x="594.7" y="611.0" width="10.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="597.7" y="622.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.90%)</title><rect x="594.7" y="595.0" width="10.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="597.7" y="606.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.90%)</title><rect x="594.7" y="579.0" width="10.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="597.7" y="590.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.90%)</title><rect x="594.7" y="563.0" width="10.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="597.7" y="574.0"></text>
</g>
<g>
<title>clear_page_erms (1 samples, 0.90%)</title><rect x="594.7" y="547.0" width="10.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="597.7" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.90%)</title><rect x="605.3" y="755.0" width="10.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="608.3" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.90%)</title><rect x="605.3" y="739.0" width="10.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="608.3" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.90%)</title><rect x="605.3" y="723.0" width="10.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="608.3" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.90%)</title><rect x="605.3" y="707.0" width="10.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="608.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (17 samples, 15.32%)</title><rect x="615.9" y="755.0" width="180.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="618.9" y="766.0">PhaseChaitin::Register_..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.90%)</title><rect x="615.9" y="739.0" width="10.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="618.9" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.90%)</title><rect x="615.9" y="723.0" width="10.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="618.9" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.90%)</title><rect x="615.9" y="707.0" width="10.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="618.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.90%)</title><rect x="626.6" y="739.0" width="10.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="629.6" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 2.70%)</title><rect x="637.2" y="739.0" width="31.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="640.2" y="750.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.90%)</title><rect x="637.2" y="723.0" width="10.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="640.2" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) [clone .part.59] (1 samples, 0.90%)</title><rect x="647.8" y="723.0" width="10.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="650.8" y="734.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.90%)</title><rect x="658.5" y="723.0" width="10.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="661.5" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.90%)</title><rect x="669.1" y="739.0" width="10.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="672.1" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.90%)</title><rect x="679.7" y="739.0" width="10.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="682.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.90%)</title><rect x="690.4" y="739.0" width="10.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="693.4" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 2.70%)</title><rect x="701.0" y="739.0" width="31.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="704.0" y="750.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 1.80%)</title><rect x="711.6" y="723.0" width="21.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="714.6" y="734.0">P..</text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.90%)</title><rect x="732.9" y="739.0" width="10.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="735.9" y="750.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.90%)</title><rect x="732.9" y="723.0" width="10.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="735.9" y="734.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.90%)</title><rect x="732.9" y="707.0" width="10.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="735.9" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 2.70%)</title><rect x="743.5" y="739.0" width="31.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="746.5" y="750.0">Ph..</text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.80%)</title><rect x="775.4" y="739.0" width="21.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="778.4" y="750.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.90%)</title><rect x="786.0" y="723.0" width="10.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="789.0" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (18 samples, 16.22%)</title><rect x="796.7" y="771.0" width="191.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="799.7" y="782.0">Compile::Optimize()</text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 2.70%)</title><rect x="796.7" y="755.0" width="31.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="799.7" y="766.0">Ph..</text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseGVN*) const (1 samples, 0.90%)</title><rect x="796.7" y="739.0" width="10.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="799.7" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.90%)</title><rect x="796.7" y="723.0" width="10.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="799.7" y="734.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.90%)</title><rect x="796.7" y="707.0" width="10.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="799.7" y="718.0"></text>
</g>
<g>
<title>PhaseCCP::saturate(Type const*, Type const*, Type const*) const (1 samples, 0.90%)</title><rect x="807.3" y="739.0" width="10.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="810.3" y="750.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.90%)</title><rect x="817.9" y="739.0" width="10.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="820.9" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::optimize(PhaseIterGVN&amp;, LoopOptsMode) (10 samples, 9.01%)</title><rect x="828.6" y="755.0" width="106.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="831.6" y="766.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (10 samples, 9.01%)</title><rect x="828.6" y="739.0" width="106.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="831.6" y="750.0">PhaseIdealLoo..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.90%)</title><rect x="828.6" y="723.0" width="10.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="831.6" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.90%)</title><rect x="828.6" y="707.0" width="10.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="831.6" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.90%)</title><rect x="828.6" y="691.0" width="10.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="831.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.90%)</title><rect x="828.6" y="675.0" width="10.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="831.6" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::duplicate_predicates_helper(Node*, Node*, Node*, IdealLoopTree*, LoopNode*, unsigned int) [clone .part.131] (1 samples, 0.90%)</title><rect x="828.6" y="659.0" width="10.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="831.6" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_skeleton_predicate(Node*, Node*, Node*, Node*, Node*, IdealLoopTree*, Node*) (1 samples, 0.90%)</title><rect x="828.6" y="643.0" width="10.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="831.6" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 4.50%)</title><rect x="839.2" y="723.0" width="53.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="842.2" y="734.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (5 samples, 4.50%)</title><rect x="839.2" y="707.0" width="53.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="842.2" y="718.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 3.60%)</title><rect x="839.2" y="691.0" width="42.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="842.2" y="702.0">Phas..</text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.90%)</title><rect x="860.5" y="675.0" width="10.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="863.5" y="686.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.90%)</title><rect x="860.5" y="659.0" width="10.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="863.5" y="670.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.90%)</title><rect x="860.5" y="643.0" width="10.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="863.5" y="654.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.90%)</title><rect x="860.5" y="627.0" width="10.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="863.5" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.90%)</title><rect x="871.1" y="675.0" width="10.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="874.1" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.90%)</title><rect x="881.7" y="691.0" width="10.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="884.7" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.90%)</title><rect x="892.3" y="723.0" width="10.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="895.3" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.80%)</title><rect x="903.0" y="723.0" width="21.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="906.0" y="734.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 1.80%)</title><rect x="903.0" y="707.0" width="21.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="906.0" y="718.0">P..</text>
</g>
<g>
<title>IdealLoopTree::is_member(IdealLoopTree const*) const (1 samples, 0.90%)</title><rect x="903.0" y="691.0" width="10.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="906.0" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.90%)</title><rect x="913.6" y="691.0" width="10.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="916.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.90%)</title><rect x="913.6" y="675.0" width="10.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="916.6" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.90%)</title><rect x="924.2" y="723.0" width="10.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="927.2" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.90%)</title><rect x="924.2" y="707.0" width="10.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="927.2" y="718.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.90%)</title><rect x="924.2" y="691.0" width="10.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="927.2" y="702.0"></text>
</g>
<g>
<title>BoolNode::hash() const (1 samples, 0.90%)</title><rect x="924.2" y="675.0" width="10.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="927.2" y="686.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.90%)</title><rect x="924.2" y="659.0" width="10.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="927.2" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.90%)</title><rect x="934.9" y="755.0" width="10.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="937.9" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.90%)</title><rect x="934.9" y="739.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="937.9" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.90%)</title><rect x="945.5" y="755.0" width="10.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="948.5" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.90%)</title><rect x="945.5" y="739.0" width="10.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="948.5" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.90%)</title><rect x="945.5" y="723.0" width="10.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="948.5" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.90%)</title><rect x="945.5" y="707.0" width="10.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="948.5" y="718.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.90%)</title><rect x="945.5" y="691.0" width="10.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="948.5" y="702.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.90%)</title><rect x="956.1" y="755.0" width="10.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="959.1" y="766.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.90%)</title><rect x="956.1" y="739.0" width="10.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="959.1" y="750.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.90%)</title><rect x="956.1" y="723.0" width="10.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="959.1" y="734.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.90%)</title><rect x="966.8" y="755.0" width="10.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="969.8" y="766.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.90%)</title><rect x="966.8" y="739.0" width="10.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="969.8" y="750.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.90%)</title><rect x="977.4" y="755.0" width="10.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="980.4" y="766.0"></text>
</g>
<g>
<title>Compile::build_start_state(StartNode*, TypeFunc const*) (1 samples, 0.90%)</title><rect x="988.0" y="771.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="991.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 2.70%)</title><rect x="998.6" y="771.0" width="31.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1001.6" y="782.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 2.70%)</title><rect x="998.6" y="755.0" width="31.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1001.6" y="766.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 2.70%)</title><rect x="998.6" y="739.0" width="31.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1001.6" y="750.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 2.70%)</title><rect x="998.6" y="723.0" width="31.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1001.6" y="734.0">Pa..</text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.90%)</title><rect x="998.6" y="707.0" width="10.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1001.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.80%)</title><rect x="1009.3" y="707.0" width="21.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1012.3" y="718.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.80%)</title><rect x="1009.3" y="691.0" width="21.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1012.3" y="702.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.90%)</title><rect x="1009.3" y="675.0" width="10.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1012.3" y="686.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.90%)</title><rect x="1009.3" y="659.0" width="10.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1012.3" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.90%)</title><rect x="1009.3" y="643.0" width="10.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1012.3" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.90%)</title><rect x="1009.3" y="627.0" width="10.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1012.3" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.90%)</title><rect x="1009.3" y="611.0" width="10.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1012.3" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.90%)</title><rect x="1009.3" y="595.0" width="10.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1012.3" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.90%)</title><rect x="1009.3" y="579.0" width="10.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1012.3" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.90%)</title><rect x="1009.3" y="563.0" width="10.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1012.3" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.90%)</title><rect x="1009.3" y="547.0" width="10.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1012.3" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.90%)</title><rect x="1009.3" y="531.0" width="10.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1012.3" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.90%)</title><rect x="1009.3" y="515.0" width="10.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1012.3" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.90%)</title><rect x="1009.3" y="499.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1012.3" y="510.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(LinkInfo const&amp;) (1 samples, 0.90%)</title><rect x="1009.3" y="483.0" width="10.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1012.3" y="494.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.90%)</title><rect x="1009.3" y="467.0" width="10.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1012.3" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.90%)</title><rect x="1009.3" y="451.0" width="10.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1012.3" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.358] (1 samples, 0.90%)</title><rect x="1009.3" y="435.0" width="10.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1012.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.90%)</title><rect x="1019.9" y="675.0" width="10.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1022.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.90%)</title><rect x="1019.9" y="659.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1022.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.90%)</title><rect x="1019.9" y="643.0" width="10.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1022.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.90%)</title><rect x="1019.9" y="627.0" width="10.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1022.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.90%)</title><rect x="1019.9" y="611.0" width="10.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1022.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.90%)</title><rect x="1019.9" y="595.0" width="10.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1022.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.90%)</title><rect x="1019.9" y="579.0" width="10.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1022.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.90%)</title><rect x="1019.9" y="563.0" width="10.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1022.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.90%)</title><rect x="1019.9" y="547.0" width="10.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1022.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.90%)</title><rect x="1019.9" y="531.0" width="10.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1022.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.90%)</title><rect x="1019.9" y="515.0" width="10.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1022.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.90%)</title><rect x="1019.9" y="499.0" width="10.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1022.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.90%)</title><rect x="1019.9" y="483.0" width="10.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1022.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.90%)</title><rect x="1019.9" y="467.0" width="10.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1022.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.90%)</title><rect x="1019.9" y="451.0" width="10.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1022.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.90%)</title><rect x="1019.9" y="435.0" width="10.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1022.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.90%)</title><rect x="1019.9" y="419.0" width="10.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1022.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.90%)</title><rect x="1019.9" y="403.0" width="10.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1022.9" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.90%)</title><rect x="1019.9" y="387.0" width="10.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1022.9" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.90%)</title><rect x="1019.9" y="371.0" width="10.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1022.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.90%)</title><rect x="1019.9" y="355.0" width="10.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1022.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.90%)</title><rect x="1019.9" y="339.0" width="10.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1022.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.90%)</title><rect x="1019.9" y="323.0" width="10.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1022.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.90%)</title><rect x="1019.9" y="307.0" width="10.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1022.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.90%)</title><rect x="1019.9" y="291.0" width="10.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1022.9" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.90%)</title><rect x="1019.9" y="275.0" width="10.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1022.9" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.90%)</title><rect x="1019.9" y="259.0" width="10.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1022.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.90%)</title><rect x="1019.9" y="243.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1022.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.90%)</title><rect x="1019.9" y="227.0" width="10.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1022.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.90%)</title><rect x="1019.9" y="211.0" width="10.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1022.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.90%)</title><rect x="1019.9" y="195.0" width="10.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1022.9" y="206.0"></text>
</g>
<g>
<title>PredicatedIntrinsicGenerator::generate(JVMState*) (1 samples, 0.90%)</title><rect x="1019.9" y="179.0" width="10.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1022.9" y="190.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.90%)</title><rect x="1019.9" y="163.0" width="10.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1022.9" y="174.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.90%)</title><rect x="1019.9" y="147.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1022.9" y="158.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_digestBase_implCompressMB(int) (1 samples, 0.90%)</title><rect x="1019.9" y="131.0" width="10.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1022.9" y="142.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_sha_implCompressMB(Node*, ciInstanceKlass*, bool, unsigned char*, char const*, Node*, Node*, Node*) (1 samples, 0.90%)</title><rect x="1019.9" y="115.0" width="10.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1022.9" y="126.0"></text>
</g>
<g>
<title>LibraryCallKit::load_field_from_object(Node*, char const*, char const*, bool, bool, ciInstanceKlass*) (1 samples, 0.90%)</title><rect x="1019.9" y="99.0" width="10.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1022.9" y="110.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_name(ciSymbol*, ciSymbol*, bool) (1 samples, 0.90%)</title><rect x="1019.9" y="83.0" width="10.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1022.9" y="94.0"></text>
</g>
<g>
<title>ciField::ciField(fieldDescriptor*) (1 samples, 0.90%)</title><rect x="1019.9" y="67.0" width="10.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1022.9" y="78.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.90%)</title><rect x="1019.9" y="51.0" width="10.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1022.9" y="62.0"></text>
</g>
<g>
<title>ciSymbol::ciSymbol(Symbol*, vmSymbols::SID) (1 samples, 0.90%)</title><rect x="1019.9" y="35.0" width="10.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1022.9" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.90%)</title><rect x="1030.5" y="771.0" width="10.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1033.5" y="782.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.90%)</title><rect x="1030.5" y="755.0" width="10.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1033.5" y="766.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (11 samples, 9.91%)</title><rect x="1041.2" y="803.0" width="116.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1044.2" y="814.0">Compiler::comp..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (11 samples, 9.91%)</title><rect x="1041.2" y="787.0" width="116.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1044.2" y="798.0">Compilation::C..</text>
</g>
<g>
<title>Compilation::compile_method() (11 samples, 9.91%)</title><rect x="1041.2" y="771.0" width="116.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1044.2" y="782.0">Compilation::c..</text>
</g>
<g>
<title>Compilation::compile_java_method() (9 samples, 8.11%)</title><rect x="1041.2" y="755.0" width="95.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1044.2" y="766.0">Compilation..</text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (4 samples, 3.60%)</title><rect x="1041.2" y="739.0" width="42.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1044.2" y="750.0">Comp..</text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.90%)</title><rect x="1041.2" y="723.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1044.2" y="734.0"></text>
</g>
<g>
<title>Instruction::hash() const (1 samples, 0.90%)</title><rect x="1041.2" y="707.0" width="10.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1044.2" y="718.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 2.70%)</title><rect x="1051.8" y="723.0" width="31.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1054.8" y="734.0">IR..</text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 2.70%)</title><rect x="1051.8" y="707.0" width="31.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1054.8" y="718.0">IR..</text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3 samples, 2.70%)</title><rect x="1051.8" y="691.0" width="31.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1054.8" y="702.0">Gr..</text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 2.70%)</title><rect x="1051.8" y="675.0" width="31.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1054.8" y="686.0">Gr..</text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 2.70%)</title><rect x="1051.8" y="659.0" width="31.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1054.8" y="670.0">Gr..</text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.90%)</title><rect x="1051.8" y="643.0" width="10.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1054.8" y="654.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.90%)</title><rect x="1051.8" y="627.0" width="10.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1054.8" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.90%)</title><rect x="1051.8" y="611.0" width="10.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1054.8" y="622.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.90%)</title><rect x="1051.8" y="595.0" width="10.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1054.8" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.90%)</title><rect x="1051.8" y="579.0" width="10.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1054.8" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.90%)</title><rect x="1051.8" y="563.0" width="10.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1054.8" y="574.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.90%)</title><rect x="1051.8" y="547.0" width="10.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1054.8" y="558.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.90%)</title><rect x="1051.8" y="531.0" width="10.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1054.8" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::if_node(Instruction*, Instruction::Condition, Instruction*, ValueStack*) (1 samples, 0.90%)</title><rect x="1062.4" y="643.0" width="10.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1065.4" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.90%)</title><rect x="1062.4" y="627.0" width="10.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1065.4" y="638.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.90%)</title><rect x="1062.4" y="611.0" width="10.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1065.4" y="622.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.90%)</title><rect x="1062.4" y="595.0" width="10.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1065.4" y="606.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.90%)</title><rect x="1062.4" y="579.0" width="10.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1065.4" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.90%)</title><rect x="1073.1" y="643.0" width="10.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1076.1" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.90%)</title><rect x="1073.1" y="627.0" width="10.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1076.1" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.90%)</title><rect x="1073.1" y="611.0" width="10.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1076.1" y="622.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.90%)</title><rect x="1073.1" y="595.0" width="10.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1076.1" y="606.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (1 samples, 0.90%)</title><rect x="1073.1" y="579.0" width="10.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1076.1" y="590.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle const&amp;, Thread*) (1 samples, 0.90%)</title><rect x="1073.1" y="563.0" width="10.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1076.1" y="574.0"></text>
</g>
<g>
<title>MethodData::allocate(ClassLoaderData*, methodHandle const&amp;, Thread*) (1 samples, 0.90%)</title><rect x="1073.1" y="547.0" width="10.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1076.1" y="558.0"></text>
</g>
<g>
<title>MethodData::initialize() (1 samples, 0.90%)</title><rect x="1073.1" y="531.0" width="10.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1076.1" y="542.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.90%)</title><rect x="1073.1" y="515.0" width="10.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1076.1" y="526.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.90%)</title><rect x="1083.7" y="739.0" width="10.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1086.7" y="750.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.90%)</title><rect x="1083.7" y="723.0" width="10.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1086.7" y="734.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_profile_call(LIR_OpProfileCall*) (1 samples, 0.90%)</title><rect x="1083.7" y="707.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1086.7" y="718.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.90%)</title><rect x="1083.7" y="691.0" width="10.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1086.7" y="702.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (4 samples, 3.60%)</title><rect x="1094.3" y="739.0" width="42.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.3" y="750.0">Comp..</text>
</g>
<g>
<title>LinearScan::do_linear_scan() (4 samples, 3.60%)</title><rect x="1094.3" y="723.0" width="42.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.3" y="734.0">Line..</text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.90%)</title><rect x="1094.3" y="707.0" width="10.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1097.3" y="718.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) [clone .constprop.237] (1 samples, 0.90%)</title><rect x="1094.3" y="691.0" width="10.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.3" y="702.0"></text>
</g>
<g>
<title>LinearScanWalker::combine_spilled_intervals(Interval*) (1 samples, 0.90%)</title><rect x="1094.3" y="675.0" width="10.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.3" y="686.0"></text>
</g>
<g>
<title>LinearScan::compute_global_live_sets() (1 samples, 0.90%)</title><rect x="1105.0" y="707.0" width="10.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.0" y="718.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.90%)</title><rect x="1105.0" y="691.0" width="10.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1108.0" y="702.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.90%)</title><rect x="1115.6" y="707.0" width="10.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.6" y="718.0"></text>
</g>
<g>
<title>LinearScan::resolve_data_flow() (1 samples, 0.90%)</title><rect x="1126.2" y="707.0" width="10.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.2" y="718.0"></text>
</g>
<g>
<title>LinearScan::resolve_collect_mappings(BlockBegin*, BlockBegin*, MoveResolver&amp;) (1 samples, 0.90%)</title><rect x="1126.2" y="691.0" width="10.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.2" y="702.0"></text>
</g>
<g>
<title>Interval::split_child_at_op_id(int, LIR_OpVisitState::OprMode) (1 samples, 0.90%)</title><rect x="1126.2" y="675.0" width="10.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.2" y="686.0"></text>
</g>
<g>
<title>Dependencies::validate_dependencies(CompileTask*, char**) (1 samples, 0.90%)</title><rect x="1136.8" y="755.0" width="10.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1139.8" y="766.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.90%)</title><rect x="1147.5" y="755.0" width="10.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.5" y="766.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, char*, int, int, char const*, FailedSpeculation**) (1 samples, 0.90%)</title><rect x="1147.5" y="739.0" width="10.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.5" y="750.0"></text>
</g>
<g>
<title>CodeBuffer::finalize_oop_references(methodHandle const&amp;) (1 samples, 0.90%)</title><rect x="1147.5" y="723.0" width="10.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.5" y="734.0"></text>
</g>
<g>
<title>Relocation::pd_address_in_code() (1 samples, 0.90%)</title><rect x="1147.5" y="707.0" width="10.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.5" y="718.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*) (1 samples, 0.90%)</title><rect x="1158.1" y="803.0" width="10.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.1" y="814.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.90%)</title><rect x="1158.1" y="787.0" width="10.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.1" y="798.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.90%)</title><rect x="1158.1" y="771.0" width="10.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.1" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.90%)</title><rect x="1158.1" y="755.0" width="10.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.1" y="766.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(Klass*) (1 samples, 0.90%)</title><rect x="1158.1" y="739.0" width="10.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.1" y="750.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(Klass*) (1 samples, 0.90%)</title><rect x="1158.1" y="723.0" width="10.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.1" y="734.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.90%)</title><rect x="1158.1" y="707.0" width="10.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.1" y="718.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.90%)</title><rect x="1168.7" y="835.0" width="10.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.7" y="846.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.90%)</title><rect x="1168.7" y="819.0" width="10.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.7" y="830.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.90%)</title><rect x="1168.7" y="803.0" width="10.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.7" y="814.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.90%)</title><rect x="1168.7" y="787.0" width="10.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1171.7" y="798.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.90%)</title><rect x="1168.7" y="771.0" width="10.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.7" y="782.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.90%)</title><rect x="1179.4" y="851.0" width="10.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.4" y="862.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.90%)</title><rect x="1179.4" y="835.0" width="10.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1182.4" y="846.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.90%)</title><rect x="1179.4" y="819.0" width="10.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1182.4" y="830.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.90%)</title><rect x="1179.4" y="803.0" width="10.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1182.4" y="814.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.90%)</title><rect x="1179.4" y="787.0" width="10.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1182.4" y="798.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.90%)</title><rect x="1179.4" y="771.0" width="10.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1182.4" y="782.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.90%)</title><rect x="1179.4" y="755.0" width="10.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1182.4" y="766.0"></text>
</g>
</g>
</svg>
